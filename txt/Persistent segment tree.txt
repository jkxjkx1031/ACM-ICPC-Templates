// updates for single positions, and querys for prefix sums (similar to BIT)

LL n,a[100010],sz,ls[3000000],rs[3000000],sum[3000000],rt[100010];

LL build(LL l,LL r)
{
    LL u=++sz;      // sz needs to be initialized
    sum[u]=0;
    if(l<r)
    {
        LL m=(l+r)/2;
        ls[u]=build(l,m);  rs[u]=build(m+1,r);
    }
    return u;
}

LL update(LL pos,LL val,LL u,LL l,LL r)
{
    if(l==r)
    {
        sum[++sz]=sum[u]+val;
        return sz;
    }
    LL v=++sz,m=(l+r)/2;
    if(pos<=m)
    {
        ls[v]=update(pos,val,ls[u],l,m);
        rs[v]=rs[u];
    }
    else
    {
        ls[v]=ls[u];
        rs[v]=update(pos,val,rs[u],m+1,r);
    }
    sum[v]=sum[ls[v]]+sum[rs[v]];
    return v;
}

LL query(LL pos,LL u,LL l,LL r)
{
    if(pos<l) return 0;
    else if(pos==r) return sum[u];
    LL m=(l+r)/2;
    if(pos>m) return sum[ls[u]]+query(pos,rs[u],m+1,r);
    else return query(pos,ls[u],l,m);
}

int main()
{
    scanf("%lld",&n);
    LL i;
    for(i=1;i<=n;i++)
        scanf("%lld",&a[i]);
    sz=0;
    rt[0]=build(1,n);
    for(i=1;i<=n;i++)
        rt[i]=update(a[i],1,rt[i-1],1,n);
    return 0;
}
