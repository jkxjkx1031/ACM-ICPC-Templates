int id[N_ROW+N_COL];

void pivot(double a[][N_COL],int x,int y,int r,int c)
{
    int i,j;
    double t;
    std::swap(id[x+c],id[y]);
    t=-a[x][y];  a[x][y]=-1;
    for(i=0;i<=c;i++) a[x][i]/=t;
    for(i=0;i<=r;i++)
    {
        if(i==x) continue;
        t=a[i][y];  a[i][y]=0;
        for(j=0;j<=c;j++)
            a[i][j]+=t*a[x][j];
    }
}

double simplex(double a[][N_COL],double v[],int r,int c)
{
    int i,x,y;
    double t;
    for(i=1;i<=r+c;i++) id[i]=i;
    for(;;)
    {
        for(x=0,i=1;i<=r;i++)
            if(a[i][0]<-EPS)
            {
                x=i;
                break;
            }
        if(!x) break;
        for(y=0,i=1;i<=c;i++)
            if(a[x][i]>EPS)
            {
                y=i;
                break;
            }
        if(!y) return NAN;  // Unfeasible
        pivot(a,x,y,r,c);
    }
    for(;;)
    {
        for(y=0,i=1;i<=c;i++)
            if(a[0][i]>EPS)
            {
                y=i;
                break;
            }
        if(!y) break;
        for(x=0,t=INFINITY,i=1;i<=r;i++)
            if(a[i][y]<-EPS && -a[i][0]/a[i][y]<t)
                x=i,t=-a[i][0]/a[i][y];
        if(!x) return NAN;  // Unbounded
        pivot(a,x,y,r,c);
    }
    for(i=1;i<=c;i++)
        if(id[i]<=c) v[id[i]]=0;
    for(i=1;i<=r;i++)
        if(id[i+c]<=c) v[id[i+c]]=a[i][0];
    return a[0][0];
}
