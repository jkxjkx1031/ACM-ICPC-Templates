#include <functional>

using namespace std;
typedef long long LL;
typedef pair<LL,LL> P;
LL sz,first[N_NODE],nxt[N_EDGE],tail[N_EDGE],len[N_EDGE],dist[N_NODE];

void addedge(LL u,LL v,LL w)
{
    sz++;
    tail[sz]=v;  len[sz]=w;
    nxt[sz]=first[u];  first[u]=sz;
}

void dijkstra(LL s)
{
    memset(dist,0x3f,sizeof(dist));
    priority_queue<P,vector<P>,greater<P>> q;
    q.push(P{0,s});
    LL u,v,e;
    while(!q.empty())
    {
        P t=q.top();  q.pop();
        if(t.first>=dist[t.second]) continue;
        u=t.second;
        dist[u]=t.first;
        for(e=first[u];e;e=nxt[e])
        {
            v=tail[e];
            if(dist[u]+len[e]<dist[v])
                q.push(P{dist[u]+len[e],v});
        }
    }
}

LL n,first[N_NODE],nxt[N_EDGE],tail[N_EDGE],len[N_EDGE],used[N_NODE],dist[N_NODE]

void dijkstra2(LL s)    // without priorty-queue
{
    memset(used,0,sizeof(used));
    memset(dist,0x3f,sizeof(dist));
    dist[s]=0;
    LL i,j,mind,mark,v,e;
    for(i=1;i<=n;i++)       // n is the number of nodes
    {
        for(mind=INF,j=1;j<=n;j++)
            if(!used[j] && dist[j]<mind)
            {
                mind=dist[j];
                mark=j;
            }
        used[mark]=1;
        for(e=first[mark];e;e=nxt[e])
        {
            v=tail[e];
            if(dist[mark]+len[e]<dist[v])
                dist[v]=dist[mark]+len[e];
        }
    }
}
