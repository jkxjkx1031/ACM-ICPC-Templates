using namespace std;
typedef pair<int,double> P;
int nv,ne,first[N_NODE],nxt[N_EDGE*2],tail[N_EDGE*2],cap[N_EDGE*2],rev[N_EDGE*2],from[N_NODE],used[N_NODE];
double len[N_EDGE*2],dist[N_NODE],h[N_NODE];

void addedge(int u,int v,int c,double l)
{
    ne++;
    tail[ne]=v;  cap[ne]=c;  len[ne]=l;
    nxt[ne]=first[u];  first[u]=ne;
    ne++;
    tail[ne]=u;  cap[ne]=0;  len[ne]=-l;
    nxt[ne]=first[v];  first[v]=ne;
    rev[ne]=ne-1;  rev[ne-1]=ne;
}

void bellman_ford(int s)
{
    int i,u,v,e;
    for(i=1;i<=nv;i++) dist[i]=INF;
    dist[s]=0;
    memset(from,0,sizeof(from));
    for(i=1;i<=nv-1;i++)
        for(u=1;u<=nv;u++)
            for(e=first[u];e;e=nxt[e])
            {
                if(!cap[e]) continue;
                v=tail[e];
                if(dist[u]+len[e]<dist[v])
                {
                    dist[v]=dist[u]+len[e];
                    from[v]=e;
                }
            }
}

void search(int s)
{
    memset(used,0,sizeof(used));
    int i,j,mark,v,e;
    double mind;
    for(i=1;i<=nv;i++) dist[i]=INF;
    dist[s]=0;
    memset(from,0,sizeof(from));
    for(i=1;i<=nv;i++)
    {
        for(mind=INF,j=1;j<=nv;j++)
            if(!used[j] && dist[j]<mind-EPS)
            {
                mind=dist[j];
                mark=j;
            } 
        used[mark]=1;
        for(e=first[mark];e;e=nxt[e])
        {
            v=tail[e];
            if(cap[e] && dist[mark]+len[e]+h[mark]-h[v]<dist[v]-EPS)
            {
                dist[v]=dist[mark]+len[e]+h[mark]-h[v];
                from[v]=e;
            }
        }
    }
}

P mcmf(int s,int t)
{
    double res=0;
    int i,u,flow=0,f;
    memset(h,0,sizeof(h));
    for(;;)
    {
        search(s);

        // When there are negative-weight edges initially, call bellman_ford(s) in the FIRST ITERATION.

        for(i=1;i<=nv;i++)
            h[i]+=dist[i];
        if(!from[t]) break;
        
        // For Min Cost Feasible Flow:
        // if(!from[t] || h[t]>=0) break;
        
        for(f=INF,u=t;u!=s;u=tail[rev[from[u]]])
            f=min(f,cap[from[u]]);
        for(u=t;u!=s;u=tail[rev[from[u]]])
        {
            cap[from[u]]-=f;
            cap[rev[from[u]]]+=f;
        }
        flow+=f;  res+=f*h[t];
    }
    return P(flow,res);
}
