int n,m,son[100010],bro[100010],cc,s[100010],par[100010],idx[100010],belong[100010],top[100010],mulv[400010],addv[400010],sum[400010];

void maintain(int k,int l,int r)
{
    if(l==r) sum[k]=addv[k];
    else sum[k]=(sum[k*2]+sum[k*2+1])*mulv[k]+addv[k]*(r-l+1);
}

void pushdown(int k,int l,int r)
{
    int mid=(l+r)/2;
    mulv[k*2]*=mulv[k];  addv[k*2]=addv[k*2]*mulv[k]+addv[k];
    maintain(k*2,l,mid);
    mulv[k*2+1]*=mulv[k];  addv[k*2+1]=addv[k*2+1]*mulv[k]+addv[k];
    maintain(k*2+1,mid+1,r);
    mulv[k]=1;  addv[k]=0;
    maintain(k,l,r);
}

void build(int k,int l,int r)
{
    mulv[k]=1;  addv[k]=0;
    if(l<r)
    {
        int mid=(l+r)/2;
        build(k*2,l,mid);  build(k*2+1,mid+1,r);
    }
    maintain(k,l,r);
}

void update(int p,int q,int val,int o,int k,int l,int r)    // o=0: multiply; o=1: add
{
    if(p<=l && q>=r)
    {
        if(!o) mulv[k]*=val,addv[k]*=val;
        else addv[k]+=val;
        maintain(k,l,r);
        return;
    }
    pushdown(k,l,r);
    int mid=(l+r)/2;
    if(p<=mid) update(p,q,val,o,k*2,l,mid);
    if(q>mid) update(p,q,val,o,k*2+1,mid+1,r);
    maintain(k,l,r);
}

int query(int p,int q,int k,int l,int r,int mul,int add)
{
    if(p<=l && q>=r)
        return sum[k]*mul+add*(r-l+1);
    int mid=(l+r)/2,res=0;
    add=mul*addv[k]+add;  mul*=mulv[k];
    if(p<=mid) res+=query(p,q,k*2,l,mid,mul,add);
    if(q>mid) res+=query(p,q,k*2+1,mid+1,r,mul,add);
    return res;
}
