/*when reading from files, use "rb" mode!!!*/

class Fast_in
{
private:
    static const int BUF_SZ=100000;
    char buf[BUF_SZ+10],*pr,*pend,ch;
    bool state;
    int len;
    char nc()
    {
        if(pr==pend)
        {
            pr=buf;
            pend=pr+fread(buf,1,BUF_SZ,stdin);
            if(pr==pend) return EOF;
            else return *pr++;
        }
        return *pr++;
    }
    bool isblank(char ch)
    {
        if(ch==' ' || ch=='\t' || ch=='\n' || ch=='\r') return true;
        else return false;
    }
    bool isdigit(char ch)
    {
        if(ch>='0' && ch<='9') return true;
        else return false;
    }
public:
    Fast_in()
    {
        pr=pend=buf;
        state=true;
    }
    operator bool()
    {
        return state;
    }
    Fast_in& get(char &ch)
    {
        state=true;
        ch=nc();
        if(ch==EOF) state=false;
        return *this;
    }

    Fast_in& getline(char *s,int n,char delim='\n')
    {
        state=true;
        for(len=0,ch=nc();len<n-1 && ch!=EOF && ch!=delim;len++,ch=nc()) *s++=ch;
        *s++='\0';
        if(ch==EOF) state=false;
        else if(len==n-1) *--pr=ch;
        return *this;
    }

    friend inline Fast_in& operator>>(Fast_in &fin,char *s)
    {
        static char ch;
        fin.state=true;
        do ch=fin.nc();
        while(fin.isblank(ch));
        if(ch==EOF)
        {
            fin.state=false;
            return fin;
        }
        for(;ch!=EOF && !fin.isblank(ch);ch=fin.nc()) *s++=ch;
        *s++='\0';
        if(ch!=EOF) *--fin.pr=ch;
        return fin;
    }

    template<class T>
    friend inline Fast_in& operator>>(Fast_in &fin,T &x)
    {
        static char ch;
        static int sig;
        fin.state=true;
        do ch=fin.nc();
        while(fin.isblank(ch));
        if(ch!='-' && !fin.isdigit(ch))
        {
            fin.state=false;
            if(ch!=EOF) *--fin.pr=ch;
            return fin;
        }
        if(ch=='-')
        {
            sig=-1;
            ch=fin.nc();
        }
        else sig=1;
        for(x=0;fin.isdigit(ch);ch=fin.nc())
            x=x*10+ch-'0';
        x*=sig;
        if(ch!=EOF) *--fin.pr=ch;
        return fin;
    }
}fin;
