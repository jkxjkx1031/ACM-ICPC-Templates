inline int dcmp(double x,double y)
{
    if(x>y+EPS) return 1;
    else if(x>y-EPS) return 0;
    else return -1;
}
        
struct LN
{
    V p,q;
    operator V() const
    {
        return q-p;
    }
    bool operator<(const LN &rhs) const      // sort lines by polar angle ([0, 2pi))
    {
        if((q-p)||rhs)
            return dcmp((rhs.p-p)^(rhs.q-p),0)>0;
        else return (q-p)<rhs;
    }
    V inters(const LN &rhs) const
    {
        if(!dcmp((q-p)^rhs,0)) return V{INF,INF};
        V t1=*this,t2=rhs,t3=rhs.p-p;
        return p+(t1&((t3^t2)/(t1^t2)));
    }
    LN shift(double l) const
    {
        V d=q-p;
        d=d/d.len();
        V n=d.rot(PI/2);
        return LN{p+(n&l),q+(n&l)};
    }
};
