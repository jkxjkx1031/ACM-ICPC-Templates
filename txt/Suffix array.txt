char a[LENGTH];
int n,ofs,sa[LENGTH],hei[LENGTH],rk[LENGTH],tmp[LENGTH];

// radix sort
int c[ALPHABET];
void rsort()  // rk[]>0
{
    int b,i;
    for(b=1;b>=0;b--)
    {
        memset(c,0,sizeof(c));
        for(i=1;i<=n;i++)
            c[sa[i]+ofs*b<=n ? rk[sa[i]+ofs*b] : 0]++;
        for(i=1;i<=MAX_RANK;i++) c[i]+=c[i-1];
        for(i=n;i>=1;i--)
            tmp[c[sa[i]+ofs*b<=n ? rk[sa[i]+ofs*b] : 0]--]=sa[i];
        for(i=1;i<=n;i++) sa[i]=tmp[i];
    }
}

bool cmp(int i,int j)
{
    if(rk[i]!=rk[j]) return rk[i]<rk[j];
    int ri=(i+ofs<=n ? rk[i+ofs] : -1),rj=(j+ofs<=n ? rk[j+ofs] : -1);  // rank>=0
    return ri<rj;
}

void build_sa()
{
    int i;
    for(i=1;i<=n;i++)
    {
        sa[i]=i;
        rk[i]=a[i];
    }
    for(ofs=1;ofs<=n;ofs*=2)
    {
        sort(sa+1,sa+n+1,cmp);

        // rsort();
        // radix sort -- construct suffix array in O(nlogn)

        for(tmp[sa[1]]=1,i=2;i<=n;i++)
            tmp[sa[i]]=tmp[sa[i-1]]+(cmp(sa[i-1],sa[i]) ? 1 : 0);
        for(i=1;i<=n;i++) rk[i]=tmp[i];
    }
}

void build_hei()
{
    int h=0,i,j;
    for(i=1;i<=n;i++)
        rk[sa[i]]=i;
    for(i=1;i<=n;i++)
    {
        if(rk[i]==n)
        {
            hei[n]=0;
            continue;
        }
        j=sa[rk[i]+1];
        if(h) h--;
        for(;j+h<=n && i+h<=n;h++)
            if(a[j+h]!=a[i+h]) break;
        hei[rk[i]]=h;
    }
}

/* Count the number of distinct substrings:

#include <cstdio>
#include <cstring>
#include <algorithm>

typedef long long LL;
char a[100010];
int n,ofs,sa[100010],hei[100010],rk[100010],tmp[100010],l[100010],r[100010],stk[100010],last[100010];

// radix sort
int c[100010];
void rsort()  // rk[]>0
{
    int b,i;
    for(b=1;b>=0;b--)
    {
        memset(c,0,sizeof(c));
        for(i=1;i<=n;i++)
            c[sa[i]+ofs*b<=n ? rk[sa[i]+ofs*b] : 0]++;
        for(i=1;i<=std::max(n,200);i++) c[i]+=c[i-1];
        for(i=n;i>=1;i--)
            tmp[c[sa[i]+ofs*b<=n ? rk[sa[i]+ofs*b] : 0]--]=sa[i];
        for(i=1;i<=n;i++) sa[i]=tmp[i];
    }
}

bool cmp(int i,int j)
{
    if(rk[i]!=rk[j]) return rk[i]<rk[j];
    int ri=(i+ofs<=n ? rk[i+ofs] : -1),rj=(j+ofs<=n ? rk[j+ofs] : -1);  // rank>=0
    return ri<rj;
}

void build_sa()
{
    int i;
    for(i=1;i<=n;i++)
    {
        sa[i]=i;
        rk[i]=a[i];
    }
    for(ofs=1;ofs<=n;ofs*=2)
    {
        rsort();
        for(tmp[sa[1]]=1,i=2;i<=n;i++)
            tmp[sa[i]]=tmp[sa[i-1]]+(cmp(sa[i-1],sa[i]) ? 1 : 0);
        for(i=1;i<=n;i++) rk[i]=tmp[i];
    }
}

void build_hei()
{
    int h=0,i,j;
    for(i=1;i<=n;i++)
        rk[sa[i]]=i;
    for(i=1;i<=n;i++)
    {
        if(rk[i]==n)
        {
            hei[n]=0;
            continue;
        }
        j=sa[rk[i]+1];
        if(h) h--;
        for(;j+h<=n && i+h<=n;h++)
            if(a[j+h]!=a[i+h]) break;
        hei[rk[i]]=h;
    }
}

int main()
{
    scanf("%d%s",&n,a+1);
    build_sa();  build_hei();
    int i,j;
    for(j=0,i=1;i<=n;i++)
    {
        while(j && hei[i]<=hei[stk[j]]) j--;
        l[i]=j ? stk[j] : 0;
        stk[++j]=i;
    }
    for(j=0,i=n;i>=1;i--)
    {
        while(j && hei[i]<=hei[stk[j]]) j--;
        r[i]=j ? stk[j] : n+1;
        stk[++j]=i;
    }
    memset(last,-1,sizeof(last));
    LL ans=0;
    for(hei[0]=hei[n+1]=0,i=1;i<=n;i++)
    {
        ans+=n-sa[i]+1-std::max(hei[i-1],hei[i]);
        if(l[i]>last[hei[i]])
            ans+=hei[i]-std::max(hei[l[i]],hei[r[i]]);
            // cnt[i]=r[i]-l[i];
        last[hei[i]]=i;
    }
    printf("%lld\n",ans);
    return 0;
}
*/
