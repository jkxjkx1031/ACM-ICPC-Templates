#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;
typedef long long LL;
const LL INF=100000000000000;
LL n,len,q,a[1000010],tag[2][2000010],sum[2000010],mx[2000010],mn[2000010],ans[3];
void build(LL k,LL l,LL r);
void update(LL op,LL p,LL q,LL val,LL k,LL l,LL r);
void query(LL p,LL q,LL k,LL l,LL r,LL add,LL &res_s,LL &res_a,LL &res_i);
void maintain(LL k,LL l,LL r);
void pushdown(LL k,LL l,LL r);

int main()
{
    freopen("segment.in","r",stdin);
    freopen("segment.out","w",stdout);
    scanf("%lld",&n);
    memset(a,0,sizeof(a));
    LL i;
    for(i=1;i<=n;i++)
        scanf("%lld",&a[i]);
    for(len=1;len<n;len*=2);
    build(1,1,len);
    scanf("%lld",&q);
    LL op,l,r,x;
    while(q--)
    {
        scanf("%lld",&op);
        if(op==1)
        {
            scanf("%lld%lld%lld",&l,&r,&x);
            update(1,l,r,x,1,1,len);
        }
        else if(op==2)
        {
            scanf("%lld%lld%lld",&l,&r,&x);
            update(0,l,r,x,1,1,len);
        }
        else
        {
            scanf("%lld%lld",&l,&r);
            ans[0]=0,ans[1]=-INF,ans[2]=INF;
            query(l,r,1,1,len,0,ans[0],ans[1],ans[2]);
            printf("%lld %lld %lld\n",ans[0],ans[1],ans[2]);
        }
    }
    return 0;
}

void build(LL k,LL l,LL r)
{
    if(l==r)
    {
        tag[0][k]=a[l];  tag[1][k]=0;
        maintain(k,l,r);
        return;
    }
    LL mid=(l+r)/2;
    build(k*2,l,mid);  build(k*2+1,mid+1,r);
    tag[0][k]=INF;  tag[1][k]=0;
    maintain(k,l,r);
}

void update(LL op,LL p,LL q,LL val,LL k,LL l,LL r)
{
    if(p<=l && q>=r)
    {
        if(op) tag[1][k]+=val;
        else tag[0][k]=val,tag[1][k]=0;
        maintain(k,l,r);
        return;
    }
    pushdown(k,l,r);
    LL mid=(l+r)/2;
    if(p<=mid) update(op,p,q,val,k*2,l,mid);
    if(q>mid) update(op,p,q,val,k*2+1,mid+1,r);
    maintain(k,l,r);
}

void query(LL p,LL q,LL k,LL l,LL r,LL add,LL &res_s,LL &res_a,LL &res_i)
{
    if(p<=l && q>=r)
    {
        res_s+=sum[k]+add*(r-l+1);
        res_a=max(res_a,mx[k]+add);  res_i=min(res_i,mn[k]+add);
        return;
    }
    else if(tag[0][k]!=INF)
    {
        res_s+=(tag[0][k]+tag[1][k]+add)*(min(q,r)-max(p,l)+1);
        res_a=max(res_a,tag[0][k]+tag[1][k]+add);
        res_i=min(res_i,tag[0][k]+tag[1][k]+add);
        return;
    }
    LL mid=(l+r)/2;
    if(p<=mid) query(p,q,k*2,l,mid,add+tag[1][k],res_s,res_a,res_i);
    if(q>mid) query(p,q,k*2+1,mid+1,r,add+tag[1][k],res_s,res_a,res_i);
}

void maintain(LL k,LL l,LL r)
{
    if(tag[0][k]!=INF)
    {
        sum[k]=(tag[0][k]+tag[1][k])*(r-l+1);
        mx[k]=mn[k]=tag[0][k]+tag[1][k];
    }
    else
    {
        sum[k]=sum[k*2]+sum[k*2+1]+tag[1][k]*(r-l+1);
        mx[k]=max(mx[k*2],mx[k*2+1])+tag[1][k];
        mn[k]=min(mn[k*2],mn[k*2+1])+tag[1][k];
    }
}

void pushdown(LL k,LL l,LL r)
{
    if(tag[0][k]!=INF)
    {
        tag[0][k*2]=tag[0][k*2+1]=tag[0][k];
        tag[1][k*2]=tag[1][k*2+1]=tag[1][k];
    }
    else
    {
        tag[1][k*2]+=tag[1][k];  tag[1][k*2+1]+=tag[1][k];
    }
    LL mid=(l+r)/2;
    maintain(k*2,l,mid);  maintain(k*2+1,mid+1,r);
    tag[0][k]=INF;  tag[1][k]=0;
    maintain(k,l,r);
}
