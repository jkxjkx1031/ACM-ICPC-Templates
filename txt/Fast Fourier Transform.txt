void build(const CPLX x[],int &i,int s,int d,int l,CPLX x2[])
{
    if(l==1)
    {
        x2[s]=x[i++];
        return;
    }
    build(x,i,s,d*2,l/2,x2);  build(x,i,s+d,d*2,l/2,x2);
}

void fft(const CPLX x[],int n,CPLX y[],int o)  // o=1: FFT;  o=-1: Inverse FFT 
{
    int t=0;
    build(x,t,0,1,n,y);
    int i,j,k;
    CPLX t1,t2,w,w0;
    for(i=1;i<n;i*=2)
        for(j=0;j<n;j+=i*2)
            for(k=0,w=1,w0=polar(1.0,PI/i*o);k<i;k++,w=w*w0)
            {
                t1=y[j+k];  t2=w*y[j+k+i];
                y[j+k]=t1+t2;  y[j+k+i]=t1-t2;
            }
    if(o>0) return;
    for(i=0;i<n;i++) y[i]/=n;
}
