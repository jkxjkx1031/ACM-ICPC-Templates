int n,sz,first[N_NODE],nxt[N_NODE*2],tail[N_NODE*2],dep[N_NODE],li[N_NODE],eul[N_NODE*2],b,minv[LOG_N_NODE][N_NODE*2];

void addedge(int u,int v)
{
    tail[++sz]=v;
    nxt[sz]=first[u];  first[u]=sz;
}

void dfs(int u)
{
    eul[++eul[0]]=u;    // initialize eul[0]
    li[u]=eul[0];   // initialize li[] to 0
    int v,e;
    for(e=first[u];e;e=nxt[e])
    {
        v=tail[e];
        if(li[v]) continue;
        dep[v]=dep[u]+1;
        dfs(v);
        eul[++eul[0]]=u;
    }
}

void rmq()
{
    b=sizeof(unsigned int)*8-__builtin_clz(n*2-1)-1;    // int __builtin_clz(unsigned int x)
    int i,j;
    for(i=1;i<=n*2-1;i++)
        minv[0][i]=eul[i];
    for(i=1;i<=b;i++)
        for(j=1;j<=n*2-1;j++)
            if(j+(1<<(i-1))>n*2-1 || dep[minv[i-1][j]]<dep[minv[i-1][j+(1<<(i-1))]])
                minv[i][j]=minv[i-1][j];
            else minv[i][j]=minv[i-1][j+(1<<(i-1))];
}

int query(int l,int r)
{
    int w=sizeof(unsigned int)*8-__builtin_clz(r-l+1)-1;
    if(dep[minv[w][l]]<dep[minv[w][r-(1<<w)+1]])
        return minv[w][l];
    else return minv[w][r-(1<<w)+1];
}

int lca(int u,int v)
{
    return query(std::min(li[u],li[v]),std::max(li[u],li[v]));
}
