struct EDGE
{
    int s,t,w;
    bool operator<(const EDGE &rhs) const
    {
        return w<rhs.w;
    }
};
EDGE edge[N_EDGE];
int m,sz,first[N_NODE],nxt[N_EDGE*2],tail[N_EDGE*2],len[N_EDGE*2],f[N_NODE];

int find(int u)
{
    return (f[u]==u ? u : (f[u]=find(f[u])));
}

void addedge(int u,int v,int l)
{
    sz++;
    tail[sz]=v;  len[sz]=l;
    nxt[sz]=first[u];  first[u]=sz;
}

int Kruskal()
{
    std::sort(edge+1,edge+m+1);
    int i,ans=0;
    for(i=1;i<=n;i++) f[i]=i;
    for(sz=0,i=1;i<=m;i++)
        if(find(edge[i].s)!=find(edge[i].t))
        {
            ans+=edge[i].w;
            f[find(edge[i].s)]=find(edge[i].t);
            addedge(edge[i].s,edge[i].t,edge[i].w);
            addedge(edge[i].t,edge[i].s,edge[i].w);
        }
    return ans;
}
