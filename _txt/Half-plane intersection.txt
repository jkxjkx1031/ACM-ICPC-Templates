// Include struct V (2D vector) and struct LN (2D line).

inline int dcmp(double x,double y)
{
    if(x>y+EPS) return 1;
    else if(x>y-EPS) return 0;
    else return -1;
}

inline bool check(const LN &last,const LN &last2,const LN &l)
{
    V crs=last.inters(last2);
    return dcmp((l.p-crs)^(l.q-crs),0)>0;
}

int hp_inters(LN *arr,int n,LN *res)    // the intersection must be a polygon!
{
    std::sort(arr+1,arr+n+1);
    int i,front=1,rear=0;
    for(i=1;i<=n;i++)
    {
        if(front<=rear && (V(h[rear])||arr[i])) continue;
        while(front<rear && !check(h[rear],h[rear-1],arr[i])) rear--;
        while(front<rear && !check(h[front],h[front+1],arr[i])) front++;
        h[++rear]=arr[i];
    }
    while(front<rear && !check(h[rear],h[rear-1],h[front])) rear--;
    int m=0;
    for(i=front;i<=rear;i++) res[++m]=h[i];
    return m;
}
