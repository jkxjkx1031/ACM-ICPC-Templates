#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>

using namespace std;
const double PI=acos(-1);
struct VERTEX
{
    int x,y;
    VERTEX(){}
    VERTEX(int xx,int yy)
    {
        x=xx,y=yy;
    }
    bool operator<(const VERTEX &rhs) const
    {
        if(x!=rhs.x) return x<rhs.x;
        else return y<rhs.y;
    }
    VERTEX operator-(const VERTEX &rhs) const
    {
        return VERTEX(x-rhs.x,y-rhs.y);
    }
}
v[1010];
int n,h[2010];
inline double dist(const VERTEX &v1,const VERTEX &v2)
{
    return sqrt((v1.x-v2.x)*(v1.x-v2.x)+(v1.y-v2.y)*(v1.y-v2.y));
}
inline int cross(const VERTEX &v1,const VERTEX &v2)
{
    return v1.x*v2.y-v1.y*v2.x;
}

int main()
{
    scanf("%d",&n);
    int i;
    for(i=1;i<=n;i++)
        scanf("%d%d",&v[i].x,&v[i].y);
    sort(v+1,v+n+1);
    int sz=0,p=0;
    for(i=1;i<=n;i++)
    {
        while(p>=sz+2 && cross(v[h[p]]-v[h[p-1]],v[i]-v[h[p]])<0) p--;
        h[++p]=i;
    }
    sz=--p;
    for(i=n;i>=1;i--)
    {
        while(p>=sz+2 && cross(v[h[p]]-v[h[p-1]],v[i]-v[h[p]])<0) p--;
        h[++p]=i;
    }
    sz=--p;
    double ans=0;
    for(i=1;i<sz;i++)
        ans+=dist(v[h[i]],v[h[i%sz+1]]);  // ans is the circumference of the hull
    printf("%.0f\n",ans);
    return 0;
}
