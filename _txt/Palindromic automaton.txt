int sz,son[N_NODE][ALPHABET],len[N_NODE],fail[N_NODE],cnt[N_NODE],pos[N_NODE];

void addnode(int l)
{
    sz++;
    memset(son[sz],0,sizeof(son[sz]));
    len[sz]=l;  cnt[sz]=0;
}

void build(const string &str)
{
    sz=0;
    addnode(-1);  addnode(0);
    fail[sz-1]=fail[sz]=sz-1;
    int i,u,x,l=str.size();
    for(u=1,i=1;i<=l;i++)
    {
        while(i-len[u]-1<1 || str[i-len[u]-1-1]!=str[i-1]) u=fail[u];
        x=str[i-1]-'a';
        if(!son[u][x])
        {
            addnode(len[u]+2);
            int v=fail[u];
            while(i-len[v]-1<1 || str[i-len[v]-1-1]!=str[i-1]) v=fail[v];
            fail[sz]=(son[v][x] ? son[v][x] : 2);
            son[u][x]=sz;
        }
        cnt[son[u][x]]++;
        u=son[u][x];
    }
    for(i=sz;i>3;i--)
        cnt[fail[i]]+=cnt[i];
}

void match(const string &str)
{
    int i,u,x,l=str.size();
    for(u=1,i=1;i<=l;i++)
    {
        x=str[i-1]-'a';
        while(i-len[u]-1<1 || str[i-len[u]-1-1]!=str[i-1] || u>1 && !son[u][x]) u=fail[u];
        u=son[u][x] ? son[u][x] : 1;
        pos[i]=u;
    }
}
