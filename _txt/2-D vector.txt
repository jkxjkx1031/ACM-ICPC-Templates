inline int dcmp(double x,double y)
{
    if(x>y+EPS) return 1;
    else if(x>y-EPS) return 0;
    else return -1;
}
    
struct V
{
    double x,y;
    // the operators are sorted by their priorities
    double operator*(const V &rhs) const    // dot product
    {
        return x*rhs.x+y*rhs.y;
    }
    V operator/(double k) const    // scalar division
    {
        return V{x/k,y/k};
    }
    V operator+(const V &rhs) const
    {
        return V{x+rhs.x,y+rhs.y};
    }
    V operator-(const V &rhs) const
    {
        return V{x-rhs.x,y-rhs.y};
    }
    bool operator<(const V &rhs) const      // sort vectors by polar angle ([0, 2pi))
    {
        return arg()<rhs.arg();
    }
    V operator&(double k) const    // scalar multiplicalion
    {
        return V{x*k,y*k};
    }
    double operator^(const V &rhs) const    // cross product
    {
        return x*rhs.y-y*rhs.x;
    }
    bool operator||(const V &rhs) const     // in the same direction
    {
        return !dcmp(*this^rhs,0) && dcmp(*this*rhs,0)>0;
    }
    double len() const
    {
        return sqrt(x*x+y*y);
    }
    double arg() const      // polar angle ([0, 2pi))
    {
        double t=atan2(y,x);
        return dcmp(t,0)<0 ? t+PI*2 : t;
    }
    V rot(double alp) const     // rotate counterclockwise
    {
        return V{x*cos(alp)-y*sin(alp),x*sin(alp)+y*cos(alp)};
    }
};
