#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>

const double INF=1e5,EPS=1e-18,LIM=1e-5;
int n,m,cv,ce,first[2000],nxt[8000],tail[8000],rev[8000],level[2000],cur[2000],que[2000],ans[110];
double cap[8000],cap0[8000];
void addedge(int u,int v,double c);
double dinic(int s,int t);
void bfs(int s);
double dfs(int u,int t,double f);

int main()
{
    freopen("life.in","r",stdin);
    freopen("life.out","w",stdout);
    scanf("%d%d",&n,&m);
    memset(first,0,sizeof(first));
    int i,u,v;
    for(ce=0,i=1;i<=m;i++)
    {
        scanf("%d%d",&u,&v);
        addedge(i,u+m,INF);  addedge(i,v+m,INF);
    }
    int s=n+m+1,t=n+m+2;
    for(i=1;i<=m;i++) addedge(s,i,1);
    for(i=1;i<=n;i++) addedge(i+m,t,0);
    for(i=1;i<=ce;i++) cap0[i]=cap[i];
    cv=n+m+2;
    double l=0,r=m,mid;
    while(r-l>LIM)
    {
        mid=(l+r)/2;
        for(i=1;i<=ce;i++)
            if(tail[i]==t) cap[i]=mid;
            else cap[i]=cap0[i];
        if(m-dinic(s,t)>EPS)
        {
            l=mid;
            for(ans[0]=0,i=1;i<=n;i++)
                if(level[i+m]>=0)
                    ans[++ans[0]]=i;
        }
        else r=mid;
    }
    std::sort(ans+1,ans+ans[0]+1);
    if(!ans[0]) ans[ans[0]=1]=1;
    for(i=0;i<=ans[0];i++)
        printf("%d\n",ans[i]);
    return 0;
}

void addedge(int u,int v,double c)
{
    ce++;
    tail[ce]=v;  cap[ce]=c;
    nxt[ce]=first[u];  first[u]=ce;
    ce++;
    tail[ce]=u;  cap[ce]=0;
    nxt[ce]=first[v];  first[v]=ce;
    rev[ce]=ce-1;  rev[ce-1]=ce;
}

double dinic(int s,int t)
{
    double ans=0,f;
    int i;
    for(;;)
    {
        bfs(s);
        if(level[t]<0) break;
        for(i=1;i<=cv;i++)
            cur[i]=first[i];
        while((f=dfs(s,t,INF))>0) ans+=f;
    }
    return ans;
}

void bfs(int s)
{
    memset(level,-1,sizeof(level));
    level[s]=0;
    int front=1,rear=1,u,v,e;
    que[1]=s;
    while(front<=rear)
    {
        u=que[front++];
        for(e=first[u];e;e=nxt[e])
        {
            v=tail[e];
            if(fabs(cap[e])<EPS || level[v]>=0) continue;
            level[v]=level[u]+1;
            que[++rear]=v;
        }
    }
}

double dfs(int u,int t,double f)
{
    if(u==t) return f;
    int v,&e=cur[u];
    double d;
    for(;e;e=nxt[e])
    {
        v=tail[e];
        if(fabs(cap[e])<EPS || level[u]>=level[v]) continue;
        d=dfs(v,t,std::min(f,cap[e]));
        if(d>0)
        {
            cap[e]-=d;
            cap[rev[e]]+=d;
            return d;
        }
    }
    return 0;
}
