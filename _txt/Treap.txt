const unsigned SEED=19260817;
int sz,ls[N_NODE],rs[N_NODE],par[N_NODE],key[N_NODE],val[N_NODE],hk[N_NODE],cnt[N_NODE];

void maintain(int u)
{
    cnt[u]=cnt[ls[u]]+cnt[rs[u]]+1;
}

int lrot(int u)
{
    int v=rs[u];
    rs[u]=ls[v];  ls[v]=u;
    par[v]=par[u];  par[u]=v;  par[rs[u]]=u;
    maintain(u);  maintain(v);
    return v;
}

int rrot(int u)
{
    int v=ls[u];
    ls[u]=rs[v];  rs[v]=u;
    par[v]=par[u];  par[u]=v;  par[ls[u]]=u;
    maintain(u);  maintain(v);
    return v;
}

int insert(int u,int p,int kk,int vv)
{
    if(!u)
    {
        sz++;
        par[sz]=p;  ls[sz]=rs[sz]=0;
        key[sz]=kk;  val[sz]=vv;
        hk[sz]=rand()+1;
        cnt[sz]=1;
        return sz;
    }
    if(kk<key[u])
        ls[u]=insert(ls[u],u,kk,vv);
    else rs[u]=insert(rs[u],u,kk,vv);
    maintain(u);
    if(hk[ls[u]]>hk[u]) u=rrot(u);
    else if(hk[rs[u]]>hk[u]) u=lrot(u);
    return u;
}

int erase(int u,int targ)
{
    if(u==targ)
    {
        if(!ls[u] && !rs[u])
        {
            par[u]=0;
            return 0;
        }
        if(hk[ls[u]]>hk[rs[u]])
        {
            u=rrot(u);
            rs[u]=erase(rs[u],targ);
        }
        else
        {
            u=lrot(u);
            ls[u]=erase(ls[u],targ);
        }
        maintain(u);
        return u;
    }
    if(key[targ]<key[u])
        ls[u]=erase(ls[u],targ);
    else rs[u]=erase(rs[u],targ);
    maintain(u);
    return u;
}

int newnode(int kk,int vv)
{
    sz++;
    par[sz]=ls[sz]=rs[sz]=0;
    key[sz]=kk;  val[sz]=vv;
    hk[sz]=rand()+1;
    cnt[sz]=1;
    return sz;
}

int insert_node(int u,int p,int v)
{
    if(!u)
    {
        par[v]=p;
        return v;
    }
    if(key[v]<key[u])
        ls[u]=insert_node(ls[u],u,v);
    else rs[u]=insert_node(rs[u],u,v);
    maintain(u);
    if(hk[ls[u]]>hk[u]) u=rrot(u);
    else if(hk[rs[u]]>hk[u]) u=lrot(u);
    return u;
}

int find(int u,int kk)
{
    if(!u) return 0;
    else if(kk==key[u]) return u;
    else if(kk<key[u])
        return find(ls[u],kk);
    else return find(rs[u],kk);
}

int pred(int u)
{
    if(ls[u])
    {
        int v=ls[u];
        while(rs[v]) v=rs[v];
        return v;
    }
    int p=u,q=par[u];
    while(q && p==ls[q])
        p=q,q=par[q];
    return q;
}

int succ(int u)
{
    if(rs[u])
    {
        int v=rs[u];
        while(ls[v]) v=ls[v];
        return v;
    }
    int p=u,q=par[u];
    while(q && p==rs[q])
        p=q,q=par[q];
    return q;
}

int rank(int u,int kk)
{
    if(!u) return 0;
    else if(kk==key[u]) return cnt[ls[u]];
    else if(kk<key[u])
        return rank(ls[u],kk);
    else return rank(rs[u],kk)+cnt[ls[u]]+1;
}

int select(int u,int k)
{
    int t=cnt[ls[u]];
    if(k==t+1) return u;
    else if(k<t+1)
        return select(ls[u],k);
    else return select(rs[u],k-cnt[ls[u]]-1);
}

void merge(int &dest,int &src)
{
    int t;
    while(src)
    {
        t=src;
        src=erase(src,src);
        dest=insert_node(dest,0,t);
    }
}
