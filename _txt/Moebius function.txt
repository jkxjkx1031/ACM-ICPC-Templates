void moebius(int n)
{
    vector<int> p;
    int i,j,t;
    for(t=n,i=2;i*i<=n;i++)
    {
        if(t%i==0) p.push_back(i);
        while(t%i==0) t/=i;
    }
    if(t>1) p.push_back(t);
    int m=p.size(),x,y;
    for(mu.clear(),i=0;i<1<<m;i++)
    {
        for(x=1,y=1,j=0;j<m;j++)
            if(i&(1<<j))
            {
                x*=p[j];
                y*=-1;
            }
        mu[x]=y;
    }
}

/*  count of non-periodic strings:

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <map>
#include <vector>
using namespace std;
typedef long long LL;
const int M=1000000007;
map<int,int> mu;
int T,n;
void moebius(int n);
int power(int x,int e);

int main()
{
    scanf("%d",&T);
    while(T--)
    {
        scanf("%d",&n);
        moebius(n);
        int ans=0;
        map<int,int>::iterator iter;
        for(iter=mu.begin();iter!=mu.end();++iter)
            ans=((ans+power(10,n/iter->first)*iter->second)%M+M)%M;
        printf("%d\n",ans);
    }
    return 0;
}

int power(int x,int e)
{
    if(!e) return 1;
    LL res=power(x,e/2);
    return (e%2 ? res*res%M*x%M : res*res%M);
}

void moebius(int n)
{
    vector<int> p;
    int i,j,t;
    for(t=n,i=2;i*i<=n;i++)
    {
        if(t%i==0) p.push_back(i);
        while(t%i==0) t/=i;
    }
    if(t>1) p.push_back(t);
    int m=p.size(),x,y;
    for(mu.clear(),i=0;i<1<<m;i++)
    {
        for(x=1,y=1,j=0;j<m;j++)
            if(i&(1<<j))
            {
                x*=p[j];
                y*=-1;
            }
        mu[x]=y;
    }
}
*/
