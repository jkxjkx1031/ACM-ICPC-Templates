int cc,s[N_NODE],par[N_NODE],idx[N_NODE],belong[N_NODE],top[N_NODE];

void dfs(int u)
{
    int v,e;
    for(s[u]=1,e=first[u];e;e=nxt[e])
    {
        v=tail[e];
        if(v==par[u]) continue;         // par[root] should be initialized
        par[v]=u;
        dfs(v);
        s[u]+=s[v];
    }
}

void split(int u)
{
    idx[u]=++idx[0];    // idx[0] should be initialized
    int v,e,v0=0;
    for(e=first[u];e;e=nxt[e])
    {
        v=tail[e];
        if(par[v]!=u) continue;
        if(s[v]>s[v0]) v0=v;
    }
    if(!v0)
    {
        belong[u]=++cc;     // cc should be initialized
        top[cc]=u;
        // ridx[u]=idx[0];
        return;
    }
    split(v0);
    belong[u]=belong[v0];
    top[belong[u]]=u;
    for(e=first[u];e;e=nxt[e])
    {
        v=tail[e];
        if(par[v]!=u || v==v0) continue;
        split(v);
    }
    // ridx[u]=idx[0];
}

int lca(int u,int v)
{
    while(belong[u]!=belong[v])
    {
        if(idx[top[belong[u]]]>idx[top[belong[v]]]) std::swap(u,v);
        v=par[top[belong[v]]];
    }
    return idx[u]<idx[v] ? u : v;
}

void update2(int u,int v,int val)
{
    while(belong[u]!=belong[v])
    {
        if(idx[top[belong[u]]]>idx[top[belong[v]]]) std::swap(u,v);
        // update(idx[top[belong[v]]],idx[v],val,1,1,n);
        v=par[top[belong[v]]];
    }
    if(idx[u]>idx[v]) std::swap(u,v);
    // update(idx[u],idx[v],val,1,1,n);
}

int query2(int u,int v)
{
    int res=0;
    while(belong[u]!=belong[v])
    {
        if(idx[top[belong[u]]]>idx[top[belong[v]]]) std::swap(u,v);
        // res+=query(idx[top[belong[v]]],idx[v],1,1,n);
        v=par[top[belong[v]]];
    }
    if(idx[u]>idx[v]) std::swap(u,v);
    // res+=query(idx[u],idx[v],1,1,n);
    return res;
}
