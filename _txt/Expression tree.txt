int build_expr(char *str)    // return root of expression tree
{
    int numn=0,opn=0,l=strlen(str),i;
    for(i=0;i<l;i++)
    {
        if(str[i]>='0' && str[i]<='9') nums[++numn]='0'-str[i];    // leaves(operands) have negative tree-node indices
        else if(str[i]=='(' || str[i]=='?') ops[++opn]=str[i];
        else
        {
            while(opn && ops[opn]!='(')
            {
                sz++;
                rs[sz]=nums[numn--];  ls[sz]=nums[numn--];
                s[sz]=(ls[sz]>0 ? s[ls[sz]] : 0)+(rs[sz]>0 ? s[rs[sz]] : 0)+1;
                nums[++numn]=sz;
                opn--;
            }
            if(opn) opn--;
        }
    }
    return nums[1];
}
