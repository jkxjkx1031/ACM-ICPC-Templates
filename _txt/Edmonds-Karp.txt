int nv,ne,first[N_NODE],nxt[N_EDGE*2],tail[N_EDGE*2],rev[N_EDGE*2],from[N_EDGE*2],que[N_NODE];
double cap[N_EDGE*2],f[N_NODE];

void addedge(int u,int v,double c)
{
    ne++;
    tail[ne]=v;  cap[ne]=c;
    nxt[ne]=first[u];  first[u]=ne;
    ne++;
    tail[ne]=u;  cap[ne]=0;
    nxt[ne]=first[v];  first[v]=ne;
    rev[ne]=ne-1;  rev[ne-1]=ne;
}

double bfs(int s,int t)
{
    int front=1,rear=0,u,v,e;
    memset(f,0,sizeof(f));
    que[++rear]=s;
    f[s]=INF;
    while(front<=rear)
    {
        u=que[front++];
        if(u==t) break;
        for(e=first[u];e;e=nxt[e])
        {
            v=tail[e];
            if(f[v] || fabs(cap[e])<EPS) continue;
            que[++rear]=v;
            f[v]=std::min(f[u],cap[e]);
            from[v]=e;
        }
    }
    return f[t];
}

double flow(int s,int t)
{
    double res=0;
    int u;
    while(bfs(s,t))
    {
        for(u=t;u!=s;u=tail[rev[from[u]]])
        {
            cap[from[u]]-=f[t];
            cap[rev[from[u]]]+=f[t];
        }
        res+=f[t];
    }
    return res;
}
